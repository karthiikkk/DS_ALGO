QUESTION:REVERSE OF A NUMBER
TOPIC:BASIC MATH
PLATFORM:LEETCODE
---------------------------------------------------------------------
QUESTION:
Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
 

Constraints:

-231 <= x <= 231 - 1

-------------------------------------------------------------------------
MY APPROACH:
  *APPLIED THE MODULO OPERATION TO GET THE LAST DIGIT
  *ADDED THE LAST DIGIT TO THE REVERSED NUMBER WHICH WAS INTIALLY SET AS 0
  *APPLIED THE DIVISION OPERATION TO GET THE REMAINING NUMBERS
  *REPEATED THE SAME UNTIL THE INTIAL NUMBER WAS ZERO
-----------------------
CODE:
class Solution:    
    def reverse(self, x: int) -> int:
        n=0
        num=x
        while(x!=0):
            rem=x%10
            n=n*10+rem
            x=x//10
        if num>0:
            return n
        else:
            return -n     
----------------------
THE ABOVE CODE IS NOT OPTIMAL AND ALSO TIME LIMIT EXCEEDED FOR MOST OF THE CASES.
-----------------------------------------------------------------------------
OPTIMAL APPROACH:
Step 1: Extract the digit in the ones place of x by using the modulo operator and store it in digit

Step 2: Add that digit to reverse as the rightmost digit

Step 3: Remove the ones digit from x and continue until x equals 0
Lastly, I use math.trunc instead of just using floor division // because of negative numbers. When dividing x by 10 and truncating the decimal, 
if the number is negative, then it would round down away from zero, when really, we want it to round up towards zero.
----------------------
CODE:
class Solution:
    def reverse(self, x: int) -> int:
        MAX_INT = 2 ** 31 - 1 # 2,147,483,647
        MIN_INT = -2 ** 31    #-2,147,483,648
        reverse = 0

        while x != 0:
            if reverse > MAX_INT / 10 or reverse < MIN_INT / 10:
                return 0
            digit = x % 10 if x > 0 else x % -10
            reverse = reverse * 10 + digit
            x = math.trunc(x / 10)

        return reverse

--------------------------------------------------------------------------------------------
********ANOTHER MOST IDEAL APPROACH FOR SOLVING IS THAT************************************
CONVERTING THE GIVEN NUMBER INTO STRING AND REVERSE SLICING USING[::-1] AND ADDING - IF IT IS NEGATIVE

--------------------------
CODE:
class Solution:
    def reverse(self, x: int) -> int:
        r=int(str(abs(x))[::-1])*(-1 if x < 0 else 1)
        return r if (-2)**31 <= r <= 2**31-1 else 0