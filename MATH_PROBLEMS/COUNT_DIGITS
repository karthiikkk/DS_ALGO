TOPIC:BASIC MATH
LEVEL:EASY
PLATFORM:LEETCODE
QUESTION NAME:COUNT DIGITS
----------------------------------------------------------------------------------------------------
QUESTION:
Given an integer num, return the number of digits in num that divide num.

An integer val divides nums if nums % val == 0.

 

Example 1:

Input: num = 7
Output: 1
Explanation: 7 divides itself, hence the answer is 1.
Example 2:

Input: num = 121
Output: 2
Explanation: 121 is divisible by 1, but not 2. Since 1 occurs twice as a digit, we return 2.
Example 3:

Input: num = 1248
Output: 4
Explanation: 1248 is divisible by all of its digits, hence the answer is 4.
 

Constraints:

1 <= num <= 109
num does not contain 0 as one of its digits.

---------------------------------------------------------------------------------------------------
MY APPROACH:
   *Divide the number with 10 to get the last digit(modulo operation)
   *Check if that number divides the n increment count
   *apply division operation on the n
--------------------------------------
SOLUTION:
class Solution:
    def countDigits(self, num: int) -> int:
        count=0
        org=num
        while(num!=0):
            rem=num%10
            if org%rem==0:
                count+=1
            num=num//10
        return count     
---------------------------------------------------------------------------------------------------
WELL WELL MY SOLUTION IS THE OPTIMAL SOLUTION FOR THIS QUESTION BEATING 99% OF THE PEOPLE.
----------------------------------------------------------------------------------------------------
TIME COMPLEXITY:O(n)
SPACE COMPLEXITY:O(n)
