------------------------------------------------------------------------------------------------------------------
--------------------------------------TOPIC:ARRAYS;LEVEL-EASY-----------------------------------------------------
------------------------------------------------------------------------------------------------------------------

PROBLEM 4:MOVE ZEROES
--------------------------
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1

------------------------------------------------------------------------------------------------------------------------
MY SOLUTION: APPROACH
  * TRAVERSE THROUGH THE LIST
  * IF YOU FIND ANY ZEROES THEN ADD A NEW ZERO TO THE END OF THE LIST
  * AND REMOVE THE EXISTING ZERO
  * THOUGH MY SOLUTION IS ONLY FEW LINES IT'S NOT FULLY OPTIMIZED
---------------------------

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        for i in range(len(nums)):
            if nums[i]==0:
                nums.append(0)
                nums.remove(0)
-------------------------------------------------------------------------------------------------------------------------
OPTIMIZED SOLUTION: APPROACH
  * TAKE TWO POINTERS ANCHOR,EXPLORER
  * INTILIAZE BOTH OF THEM TWO 0
  * IF THE EPLORER VALUE IS NOT EQUAL TO ZERO THEN SWAP THE VALUES IN THE LIST USING ANCHOR & EXPLORER ELEEMENTS.
  * INCREMENT THE EXPLORER VALUE BY ONE AND REPEAT IT TILL THE END OF THE LIST.
----------------------------

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        anchor = 0
        for explorer in range(len(nums)):
            if nums[explorer] != 0:
                nums[anchor], nums[explorer] = nums[explorer], nums[anchor]
                anchor += 1
---------------------------------------------------------------------------------------------------------------------------
TIME COMPLEXITY:O(n)
SPACE COMPLEXITY:O(1)
TIME TAKEN :35 MINS