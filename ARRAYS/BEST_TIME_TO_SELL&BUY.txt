---------------------------------------------------------------------------------------------
---------------------------------------TOPIC:ARRAYS,LEVEL-EASY-------------------------------
---------------------------------------------------------------------------------------------

PROBLEM-2 BEST TIME TO BUY AND SELL STOCK
---------------------------------------------------------------------------------------------

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104

-------------------------------------------------------------------------------------------------
I TRIED A SOLUTION BUT IT DID NOT WORK FOR SOME OF THE TEST CASES

-------------
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        buy=min(prices)
        mp=prices.index(buy)
        nprices=sorted(prices,reverse=True)
        if prices==nprices:
            return 0
        else:
            sell=max(prices[mp+1:],default=0)
            return sell-buy

--------------------------------------------------------------------------------------------------
THE OPTIMIZED SOLUTION THAT WORKED:

-----------------
class Solution:
    def maxProfit(self,prices):
        left = 0 #Buy
        right = 1 #Sell
        max_profit = 0
        while right < len(prices):
            currentProfit = prices[right] - prices[left] #our current Profit
            if prices[left] < prices[right]:
                max_profit =max(currentProfit,max_profit)
            else:
                left = right
            right += 1
        return max_profit

-------------------------------------------------------------------------------------------------
TIME COMPLEXITY:O(n)
SPACE COMPLEXITY:O(1)
-------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
KEY POINTS:
--------------------------------------------------------------------------------------------------
 * WE USED TWO POINTER APPROACH IN SOLVING THE ABOVE PROBLEM.
 * HAVE A BETTER UNDERSTANDING OF THE QUESTION.
 * FIRST SOLVE USING A PEN_PAPER.
       
